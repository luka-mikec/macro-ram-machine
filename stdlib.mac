// mram stdlib, implements:
// arithmetic: ++, --, +, -, *, /, +=, -=, %,
// logic: &&, ||, ~, true, false,
// comparison: ==, <=, <,
// structure: ifthen, while,
// arrays [SLOW]: implemented: decode_into, get; planned: push, pop, concat, sizeof, <-, ->
// other: =, nop, mark,

// format: new <macro_name> statement_1 .. statement_n

// names of macros requiring additional memory to work start with f_
// for each f_command there is a command (often not called 'command', e.g. for f_set there is =),
// that uses default spare registers (1e6, 2e6, ...)

// 12. 9. 2013. luka.mikec1@gmail.com

// nop
new nop 0
    inc 1000000
    dec 1000000 0

// #define mark <n> nop
new mark 1
    nop

// -1 := '0'
new zero 1
        dec -1 2
        goto 0
new false 1
        zero -1

// -1 := '1'
new true 1
        zero -1
        inc -1

// ++ -1
new ++ 1
        inc -1

// -- -1
new -- 1
        dec -1 2

// -1 += -2 using -3; -1 != -2
new f_uadd_diff 3
        zero -3
        dec -2 5
        inc -1
        inc -3
        goto 1
        dec -3 8
        inc -2
        goto 5

// -1 = -2 using -3; -1 != -2
new f_set_diff 3
        zero -1
        f_uadd_diff -1 -2 -3

// -1 += -2 using -3 -4
new f_uadd 4
        f_set_diff -3 -2 -4
        f_uadd_diff -1 -3 -4

// -1 = -2 using -3 -4
new f_set 4
        f_set_diff -3 -2 -4
        zero -1
        f_uadd_diff -1 -3 -4
        zero -2
        f_uadd_diff -2 -3 -4

// -1 += -2 using e6 x1
new += 2
        f_uadd -1 -2 1000000 2000000

// -1 = -2 using e6 x2
new = 2
        f_set -1 -2 1000000 2000000

// -1 -= -2 using -3 -4
new f_usub 4
        f_set_diff -3 -2 -4
        dec -3 4
        dec -1 4
        goto 1

// -1 -= -2 using e6
new -= 2
        f_usub -1 -2 1000000 2000000

// -1 = -2 + -3 using -4 -5 -6 -7
new f_add 7
        f_set -4 -2 -6 -7
        f_set -5 -3 -6 -7
        zero -1
        f_uadd -1 -4 -6 -7
        f_uadd -1 -5 -6 -7


// -1 = -2 + -3 using -4; != -1, -2, -3
new f_add_diff 4
        zero -1
        f_uadd_diff -1 -2 -4
        f_uadd_diff -1 -3 -4


// -1 = -2 + -3 using e6 x2
new + 3
        f_add -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = -2 - -3 using -4 -5 -6 -7
new f_sub 7
        f_set -4 -2 -6 -7
        f_usub -4 -3 -5 -6
        f_set -1 -4 -6 -7

// -1 = -2 - -3 using -4 -5 -6; != -1, -2, -3
new f_sub_diff 6
        f_set_diff -1 -2 -4
        f_usub -1 -3 -5 -6

// -1 = -2 - -3 using  e6 x4
new - 3
        f_sub -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = -2 * -3 using -4 ... -5, != -1, -2, -3
new f_mul_diff 5
        f_set_diff -4 -3 -5
        dec -4 4
        f_uadd_diff -1 -2 -5
        goto 1

// -1 = -2 * -3 using -4 ... -7
new f_mul 7
        f_set -4 -2 -6 -7
        zero -5
        dec -4 5
        f_uadd -5 -3 -6 -7
        goto 2
        f_set -1 -5 -6 -7

// -1 *= -2 using -4 ... -5
new f_umul 4
        f_set_diff -3 -1 -4
        zero -1
        dec -3 5
        f_uadd_diff -1 -2 -4
        goto 2

// -1 = -2 * -3 using  e6 x4
new * 3
        f_mul -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = sgn(-2)
new sgn 2
        dec -2 5
        inc -2
        zero -1
        inc -1
        goto 6
        zero -1

// -1 = !-2
new ~ 2
        sgn -1 -2
        dec -1 3
        goto 4
        inc -1

// -1 = -2 && -3 using -4 -5 -6 -7
new f_and 7
        f_mul -1 -2 -3 -4 -5 -6 -7
        sgn -1 -1

// -1 = -2 || -3 using -4 -5 -6 -7
new f_or 7
        f_add -1 -2 -3 -4 -5 -6 -7
        sgn -1 -1

// -1 = -2 && -3 using e6 x4
new && 3
        f_and -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = -2 || -3 using e6 x4
new || 3
        f_or -1 -2 -3 1000000 2000000 3000000 4000000

// if -1 then goto -2 using -3
new f_ifthen 3
        ~ -3 -1
        dec -3 3
        goto 4
        goto -2

// if -1 then goto -2 using e6 x1
new ifthen 2
        f_ifthen -1 -2 1000000

// if -1 then goto -2 else -3 using -4
new f_ifthenelse 4
        f_ifthen -1 -2 -4
        goto -3

// if -1 then goto -2 else -3 using e6 x1
new ifthenelse 3
        f_ifthenelse -1 -2 -3 1000000

// -1 = (-2 == -3) using -4 ... -9
new f_eql 9
        f_sub -4 -2 -3 -9 -8 -7 -6
        f_sub -5 -3 -2 -9 -8 -7 -6
        f_or -4 -4 -5 -9 -8 -7 -6
        ~ -1 -4

new f_eql_diff 8
        f_sub_diff -4 -2 -3 -8 -7 -6
        sgn -4 -4
        f_ifthen -4 different -8

        f_sub_diff -5 -3 -2 -8 -7 -6
        sgn -5 -5

        ~ -1 -5
        goto theend

        mark different
        false -1

        mark theend

// -1 = (-2 == -3) using e6 x6
new == 3
        f_eql -1 -2 -3 1000000 2000000 3000000 4000000 5000000 6000000



// while (-1) goto -2, using -3
new f_while 3
        f_ifthen -1 -2 -3

// while (-1) goto -2, using e6 x1
new while 2
        f_while -1 -2 1000000

// -1 = (-2 <= -3), using -4 ... -7
new f_<= 7
        f_sub -1 -2 -3 -4 -5 -6 -7
        ~ -1 -1

// -1 = (-2 <= -3), using e6 x4
new <= 3
        f_<= -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = (-2 < -3), using -4 ... -9
new f_< 7
        f_<= -1 -3 -2 -4 -5 -6 -7
        ~ -1 -1


// -1 = (-2 < -3), using e6 x6
new < 3
        f_< -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = -2 / -3, using -4 .. -7
new f_div 7
    f_set_diff -4 -2     -6
    f_set_diff -5 -3    -6

    zero -1
    mark loop
            inc -1
            inc -4
            f_usub -4 -5    -6 -7

            dec -4 cont1
            dec -4 theend
            inc -4
            mark cont1
    f_while -4 loop -6
    dec -1 theend
    mark theend

// -1 = -2 / -3, using e6
new / 3
    f_div -1 -2 -3 1000000 2000000 3000000 4000000

// -1 = -2 % -3 using -4 .. -10
new f_mod 9
    f_set_diff -4 -2         -9
    f_set_diff -5 -3         -9
    f_div -1 -2 -3           -6 -7 -8 -9
    f_mul_diff -6 -5 -1      -7 -8
    f_sub_diff -1 -4 -6      -7 -8 -9

new % 3
    f_mod -1 -2 -3 1000000 2000000 3000000 4000000 5000000 6000000


// functions below are currently unsafe if e6 registers are used outside of stdlib
// these funs tend to use 100+ registers

// decode(data, -1) -> header -2, rest -3, uses 100-109
new decode_into 3
    zero 100
    inc10 100

    zero 109
    inc9 109

    = 105 -1
    zero 102

    mark begin_removal
        % 101 105 100
        f_uadd_diff 102 101 1000000
        f_eql_diff 103 101 109 1000000 2000000 3000000 4000000 5000000
        / 105 105 100
    while 103 begin_removal

    f_set_diff -2 102 1000000
    f_set_diff -3 105 1000000

// from array -2, get element at -3, into -1, uses 110-119
new get 3
    f_set_diff 111 -2 1000000

    zero  113
    inc10 113

    ~ 110 -3
    ifthen 110 retrieve
    f_set_diff 110 -3 1000000
    mark skip
        inc 119
        dec 110 retrieve
        decode_into 111 112 111
        mark sz
            dec 112 skip
            / 111 111 113
        goto sz
    goto skip

    mark retrieve

    zero 118
    decode_into 111 116 115

    zero -1
    true 114
    mark nju
        inc 118
        dec 116 theend
        f_umul 114 113 1000000 2000000 3000000
    goto nju

    mark theend
    % -1 115 114

// -1 = -2 :: -3, using 120-129
new concat 3
    zero 120
    zero 121

    inc10 120
    inc1 121
    mark loop
        f_umul 121 120 1000000 2000000 3000000
        < 123 -3 121
        ~ 123 123
   while 123 loop

   f_mul_diff 124 121 -2 1000000 2000000
   f_add -1 124 -3 1000000 2000000 3000000 4000000


new EOF





